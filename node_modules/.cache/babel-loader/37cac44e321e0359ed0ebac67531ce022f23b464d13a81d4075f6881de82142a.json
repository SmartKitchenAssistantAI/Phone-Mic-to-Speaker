{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arjun\\\\Desktop\\\\phone-mic-to-speaker\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [level, setLevel] = useState(0);\n  const [status, setStatus] = useState('Ready to connect');\n  const [error, setError] = useState(false);\n\n  // Refs for audio processing\n  const audioContextRef = useRef(null);\n  const micStreamRef = useRef(null);\n  const micSourceRef = useRef(null);\n  const gainNodeRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  // Start audio processing\n  const startAudio = async () => {\n    try {\n      // Create audio context\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n\n      // Get mic access\n      micStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: false,\n          noiseSuppression: false,\n          autoGainControl: false\n        }\n      });\n\n      // Create audio source from mic\n      micSourceRef.current = audioContextRef.current.createMediaStreamSource(micStreamRef.current);\n\n      // Create gain node for volume control\n      gainNodeRef.current = audioContextRef.current.createGain();\n      gainNodeRef.current.gain.value = volume;\n\n      // Create analyzer for level meter\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      analyserRef.current.fftSize = 256;\n\n      // Connect nodes: mic -> gain -> analyzer -> output\n      micSourceRef.current.connect(gainNodeRef.current);\n      gainNodeRef.current.connect(analyserRef.current);\n      gainNodeRef.current.connect(audioContextRef.current.destination);\n\n      // Start level meter visualization\n      updateLevelMeter();\n\n      // Update UI\n      setIsActive(true);\n      setStatus('Microphone active - sending to speaker');\n      setError(false);\n    } catch (err) {\n      console.error('Error accessing microphone:', err);\n      setStatus(`Error: ${err.message}`);\n      setError(true);\n      setIsActive(false);\n    }\n  };\n\n  // Stop audio processing\n  const stopAudio = () => {\n    if (micStreamRef.current) {\n      micStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n\n    // Cancel animation frame\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n\n    // Reset variables\n    audioContextRef.current = null;\n    micStreamRef.current = null;\n    micSourceRef.current = null;\n    gainNodeRef.current = null;\n    analyserRef.current = null;\n\n    // Update UI\n    setIsActive(false);\n    setStatus('Ready to connect');\n    setError(false);\n    setLevel(0);\n  };\n\n  // Update level meter based on mic input\n  const updateLevelMeter = () => {\n    if (!analyserRef.current || !isActive) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const draw = () => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate volume level (average of all frequencies)\n      let sum = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        sum += dataArray[i];\n      }\n      const average = sum / bufferLength;\n\n      // Update level meter (0-100%)\n      const newLevel = Math.min(100, Math.max(0, average * 100 / 256));\n      setLevel(newLevel);\n    };\n    draw();\n  };\n\n  // Toggle mic on/off\n  const toggleMicrophone = () => {\n    if (isActive) {\n      stopAudio();\n    } else {\n      startAudio();\n    }\n  };\n\n  // Update volume when slider changes\n  useEffect(() => {\n    if (gainNodeRef.current) {\n      gainNodeRef.current.gain.value = volume;\n    }\n  }, [volume]);\n\n  // Handle page visibility changes\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden && isActive) {\n        stopAudio();\n        setStatus('Paused - return to this page to resume');\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [isActive]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (isActive) {\n        stopAudio();\n      }\n    };\n  }, [isActive]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phone Mic to Speaker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status ${isActive ? 'connected' : ''} ${error ? 'error' : ''}`,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `mic-button ${isActive ? 'recording' : ''}`,\n      onClick: toggleMicrophone,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"mic-icon\",\n        viewBox: \"0 0 24 24\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12,2A3,3 0 0,1 15,5V11A3,3 0 0,1 12,14A3,3 0 0,1 9,11V5A3,3 0 0,1 12,2M19,11C19,14.53 16.39,17.44 13,17.93V21H11V17.93C7.61,17.44 5,14.53 5,11H7A5,5 0 0,0 12,16A5,5 0 0,0 17,11H19Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"level-meter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"level-fill\",\n        style: {\n          width: `${level}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"volume-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"volumeSlider\",\n        children: \"Microphone Volume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"2\",\n        step: \"0.1\",\n        value: volume,\n        className: \"volume-slider\",\n        id: \"volumeSlider\",\n        onChange: e => setVolume(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to use:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Connect your Bluetooth/USB/aux speaker to your device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Tap the microphone button to start/stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Adjust the volume slider as needed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Your microphone input will play through the connected speaker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"Note: On mobile devices, this will only work while this page is open and active.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J09B2wnsw0m38FIyayoPuiRRPcw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","isActive","setIsActive","volume","setVolume","level","setLevel","status","setStatus","error","setError","audioContextRef","micStreamRef","micSourceRef","gainNodeRef","analyserRef","animationFrameRef","startAudio","current","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","createMediaStreamSource","createGain","gain","value","createAnalyser","fftSize","connect","destination","updateLevelMeter","err","console","message","stopAudio","getTracks","forEach","track","stop","close","cancelAnimationFrame","bufferLength","frequencyBinCount","dataArray","Uint8Array","draw","requestAnimationFrame","getByteFrequencyData","sum","i","average","newLevel","Math","min","max","toggleMicrophone","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","viewBox","d","style","width","htmlFor","type","step","id","onChange","e","parseFloat","target","_c","$RefreshReg$"],"sources":["C:/Users/arjun/Desktop/phone-mic-to-speaker/src/app.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  const [level, setLevel] = useState(0);\r\n  const [status, setStatus] = useState('Ready to connect');\r\n  const [error, setError] = useState(false);\r\n\r\n  // Refs for audio processing\r\n  const audioContextRef = useRef(null);\r\n  const micStreamRef = useRef(null);\r\n  const micSourceRef = useRef(null);\r\n  const gainNodeRef = useRef(null);\r\n  const analyserRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n\r\n  // Start audio processing\r\n  const startAudio = async () => {\r\n    try {\r\n      // Create audio context\r\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n      \r\n      // Get mic access\r\n      micStreamRef.current = await navigator.mediaDevices.getUserMedia({ \r\n        audio: { \r\n          echoCancellation: false,\r\n          noiseSuppression: false,\r\n          autoGainControl: false\r\n        } \r\n      });\r\n      \r\n      // Create audio source from mic\r\n      micSourceRef.current = audioContextRef.current.createMediaStreamSource(micStreamRef.current);\r\n      \r\n      // Create gain node for volume control\r\n      gainNodeRef.current = audioContextRef.current.createGain();\r\n      gainNodeRef.current.gain.value = volume;\r\n      \r\n      // Create analyzer for level meter\r\n      analyserRef.current = audioContextRef.current.createAnalyser();\r\n      analyserRef.current.fftSize = 256;\r\n      \r\n      // Connect nodes: mic -> gain -> analyzer -> output\r\n      micSourceRef.current.connect(gainNodeRef.current);\r\n      gainNodeRef.current.connect(analyserRef.current);\r\n      gainNodeRef.current.connect(audioContextRef.current.destination);\r\n      \r\n      // Start level meter visualization\r\n      updateLevelMeter();\r\n      \r\n      // Update UI\r\n      setIsActive(true);\r\n      setStatus('Microphone active - sending to speaker');\r\n      setError(false);\r\n    } catch (err) {\r\n      console.error('Error accessing microphone:', err);\r\n      setStatus(`Error: ${err.message}`);\r\n      setError(true);\r\n      setIsActive(false);\r\n    }\r\n  };\r\n\r\n  // Stop audio processing\r\n  const stopAudio = () => {\r\n    if (micStreamRef.current) {\r\n      micStreamRef.current.getTracks().forEach(track => track.stop());\r\n    }\r\n    \r\n    if (audioContextRef.current) {\r\n      audioContextRef.current.close();\r\n    }\r\n    \r\n    // Cancel animation frame\r\n    if (animationFrameRef.current) {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n      animationFrameRef.current = null;\r\n    }\r\n    \r\n    // Reset variables\r\n    audioContextRef.current = null;\r\n    micStreamRef.current = null;\r\n    micSourceRef.current = null;\r\n    gainNodeRef.current = null;\r\n    analyserRef.current = null;\r\n    \r\n    // Update UI\r\n    setIsActive(false);\r\n    setStatus('Ready to connect');\r\n    setError(false);\r\n    setLevel(0);\r\n  };\r\n\r\n  // Update level meter based on mic input\r\n  const updateLevelMeter = () => {\r\n    if (!analyserRef.current || !isActive) return;\r\n    \r\n    const bufferLength = analyserRef.current.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    \r\n    const draw = () => {\r\n      animationFrameRef.current = requestAnimationFrame(draw);\r\n      \r\n      analyserRef.current.getByteFrequencyData(dataArray);\r\n      \r\n      // Calculate volume level (average of all frequencies)\r\n      let sum = 0;\r\n      for (let i = 0; i < bufferLength; i++) {\r\n        sum += dataArray[i];\r\n      }\r\n      const average = sum / bufferLength;\r\n      \r\n      // Update level meter (0-100%)\r\n      const newLevel = Math.min(100, Math.max(0, average * 100 / 256));\r\n      setLevel(newLevel);\r\n    };\r\n    \r\n    draw();\r\n  };\r\n\r\n  // Toggle mic on/off\r\n  const toggleMicrophone = () => {\r\n    if (isActive) {\r\n      stopAudio();\r\n    } else {\r\n      startAudio();\r\n    }\r\n  };\r\n\r\n  // Update volume when slider changes\r\n  useEffect(() => {\r\n    if (gainNodeRef.current) {\r\n      gainNodeRef.current.gain.value = volume;\r\n    }\r\n  }, [volume]);\r\n\r\n  // Handle page visibility changes\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden && isActive) {\r\n        stopAudio();\r\n        setStatus('Paused - return to this page to resume');\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    \r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [isActive]);\r\n\r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (isActive) {\r\n        stopAudio();\r\n      }\r\n    };\r\n  }, [isActive]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Phone Mic to Speaker</h1>\r\n      \r\n      <div className={`status ${isActive ? 'connected' : ''} ${error ? 'error' : ''}`}>\r\n        {status}\r\n      </div>\r\n      \r\n      <button \r\n        className={`mic-button ${isActive ? 'recording' : ''}`} \r\n        onClick={toggleMicrophone}\r\n      >\r\n        <svg className=\"mic-icon\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M12,2A3,3 0 0,1 15,5V11A3,3 0 0,1 12,14A3,3 0 0,1 9,11V5A3,3 0 0,1 12,2M19,11C19,14.53 16.39,17.44 13,17.93V21H11V17.93C7.61,17.44 5,14.53 5,11H7A5,5 0 0,0 12,16A5,5 0 0,0 17,11H19Z\" />\r\n        </svg>\r\n      </button>\r\n      \r\n      <div className=\"level-meter\">\r\n        <div className=\"level-fill\" style={{ width: `${level}%` }}></div>\r\n      </div>\r\n      \r\n      <div className=\"volume-control\">\r\n        <label htmlFor=\"volumeSlider\">Microphone Volume</label>\r\n        <input \r\n          type=\"range\" \r\n          min=\"0\" \r\n          max=\"2\" \r\n          step=\"0.1\" \r\n          value={volume} \r\n          className=\"volume-slider\" \r\n          id=\"volumeSlider\" \r\n          onChange={(e) => setVolume(parseFloat(e.target.value))}\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"instructions\">\r\n        <h3>How to use:</h3>\r\n        <ul>\r\n          <li>Connect your Bluetooth/USB/aux speaker to your device</li>\r\n          <li>Tap the microphone button to start/stop</li>\r\n          <li>Adjust the volume slider as needed</li>\r\n          <li>Your microphone input will play through the connected speaker</li>\r\n        </ul>\r\n      </div>\r\n      \r\n      <footer>\r\n        Note: On mobile devices, this will only work while this page is open and active.\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,kBAAkB,CAAC;EACxD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACA,MAAMiB,eAAe,GAAGhB,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMiB,YAAY,GAAGjB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMkB,YAAY,GAAGlB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMmB,WAAW,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMoB,WAAW,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMqB,iBAAiB,GAAGrB,MAAM,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMsB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF;MACAN,eAAe,CAACO,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;;MAElF;MACAT,YAAY,CAACM,OAAO,GAAG,MAAMI,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAC/DC,KAAK,EAAE;UACLC,gBAAgB,EAAE,KAAK;UACvBC,gBAAgB,EAAE,KAAK;UACvBC,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;;MAEF;MACAf,YAAY,CAACK,OAAO,GAAGP,eAAe,CAACO,OAAO,CAACW,uBAAuB,CAACjB,YAAY,CAACM,OAAO,CAAC;;MAE5F;MACAJ,WAAW,CAACI,OAAO,GAAGP,eAAe,CAACO,OAAO,CAACY,UAAU,CAAC,CAAC;MAC1DhB,WAAW,CAACI,OAAO,CAACa,IAAI,CAACC,KAAK,GAAG7B,MAAM;;MAEvC;MACAY,WAAW,CAACG,OAAO,GAAGP,eAAe,CAACO,OAAO,CAACe,cAAc,CAAC,CAAC;MAC9DlB,WAAW,CAACG,OAAO,CAACgB,OAAO,GAAG,GAAG;;MAEjC;MACArB,YAAY,CAACK,OAAO,CAACiB,OAAO,CAACrB,WAAW,CAACI,OAAO,CAAC;MACjDJ,WAAW,CAACI,OAAO,CAACiB,OAAO,CAACpB,WAAW,CAACG,OAAO,CAAC;MAChDJ,WAAW,CAACI,OAAO,CAACiB,OAAO,CAACxB,eAAe,CAACO,OAAO,CAACkB,WAAW,CAAC;;MAEhE;MACAC,gBAAgB,CAAC,CAAC;;MAElB;MACAnC,WAAW,CAAC,IAAI,CAAC;MACjBM,SAAS,CAAC,wCAAwC,CAAC;MACnDE,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC,OAAO4B,GAAG,EAAE;MACZC,OAAO,CAAC9B,KAAK,CAAC,6BAA6B,EAAE6B,GAAG,CAAC;MACjD9B,SAAS,CAAC,UAAU8B,GAAG,CAACE,OAAO,EAAE,CAAC;MAClC9B,QAAQ,CAAC,IAAI,CAAC;MACdR,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMuC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI7B,YAAY,CAACM,OAAO,EAAE;MACxBN,YAAY,CAACM,OAAO,CAACwB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;IACjE;IAEA,IAAIlC,eAAe,CAACO,OAAO,EAAE;MAC3BP,eAAe,CAACO,OAAO,CAAC4B,KAAK,CAAC,CAAC;IACjC;;IAEA;IACA,IAAI9B,iBAAiB,CAACE,OAAO,EAAE;MAC7B6B,oBAAoB,CAAC/B,iBAAiB,CAACE,OAAO,CAAC;MAC/CF,iBAAiB,CAACE,OAAO,GAAG,IAAI;IAClC;;IAEA;IACAP,eAAe,CAACO,OAAO,GAAG,IAAI;IAC9BN,YAAY,CAACM,OAAO,GAAG,IAAI;IAC3BL,YAAY,CAACK,OAAO,GAAG,IAAI;IAC3BJ,WAAW,CAACI,OAAO,GAAG,IAAI;IAC1BH,WAAW,CAACG,OAAO,GAAG,IAAI;;IAE1B;IACAhB,WAAW,CAAC,KAAK,CAAC;IAClBM,SAAS,CAAC,kBAAkB,CAAC;IAC7BE,QAAQ,CAAC,KAAK,CAAC;IACfJ,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAM+B,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACtB,WAAW,CAACG,OAAO,IAAI,CAACjB,QAAQ,EAAE;IAEvC,MAAM+C,YAAY,GAAGjC,WAAW,CAACG,OAAO,CAAC+B,iBAAiB;IAC1D,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAE9C,MAAMI,IAAI,GAAGA,CAAA,KAAM;MACjBpC,iBAAiB,CAACE,OAAO,GAAGmC,qBAAqB,CAACD,IAAI,CAAC;MAEvDrC,WAAW,CAACG,OAAO,CAACoC,oBAAoB,CAACJ,SAAS,CAAC;;MAEnD;MACA,IAAIK,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,YAAY,EAAEQ,CAAC,EAAE,EAAE;QACrCD,GAAG,IAAIL,SAAS,CAACM,CAAC,CAAC;MACrB;MACA,MAAMC,OAAO,GAAGF,GAAG,GAAGP,YAAY;;MAElC;MACA,MAAMU,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;MAChEnD,QAAQ,CAACoD,QAAQ,CAAC;IACpB,CAAC;IAEDN,IAAI,CAAC,CAAC;EACR,CAAC;;EAED;EACA,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI7D,QAAQ,EAAE;MACZwC,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLxB,UAAU,CAAC,CAAC;IACd;EACF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,IAAIkB,WAAW,CAACI,OAAO,EAAE;MACvBJ,WAAW,CAACI,OAAO,CAACa,IAAI,CAACC,KAAK,GAAG7B,MAAM;IACzC;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;;EAEZ;EACAP,SAAS,CAAC,MAAM;IACd,MAAMmE,sBAAsB,GAAGA,CAAA,KAAM;MACnC,IAAIC,QAAQ,CAACC,MAAM,IAAIhE,QAAQ,EAAE;QAC/BwC,SAAS,CAAC,CAAC;QACXjC,SAAS,CAAC,wCAAwC,CAAC;MACrD;IACF,CAAC;IAEDwD,QAAQ,CAACE,gBAAgB,CAAC,kBAAkB,EAAEH,sBAAsB,CAAC;IAErE,OAAO,MAAM;MACXC,QAAQ,CAACG,mBAAmB,CAAC,kBAAkB,EAAEJ,sBAAsB,CAAC;IAC1E,CAAC;EACH,CAAC,EAAE,CAAC9D,QAAQ,CAAC,CAAC;;EAEd;EACAL,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIK,QAAQ,EAAE;QACZwC,SAAS,CAAC,CAAC;MACb;IACF,CAAC;EACH,CAAC,EAAE,CAACxC,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKsE,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBvE,OAAA;MAAAuE,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7B3E,OAAA;MAAKsE,SAAS,EAAE,UAAUnE,QAAQ,GAAG,WAAW,GAAG,EAAE,IAAIQ,KAAK,GAAG,OAAO,GAAG,EAAE,EAAG;MAAA4D,QAAA,EAC7E9D;IAAM;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAEN3E,OAAA;MACEsE,SAAS,EAAE,cAAcnE,QAAQ,GAAG,WAAW,GAAG,EAAE,EAAG;MACvDyE,OAAO,EAAEZ,gBAAiB;MAAAO,QAAA,eAE1BvE,OAAA;QAAKsE,SAAS,EAAC,UAAU;QAACO,OAAO,EAAC,WAAW;QAAAN,QAAA,eAC3CvE,OAAA;UAAM8E,CAAC,EAAC;QAAuL;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/L;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAET3E,OAAA;MAAKsE,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BvE,OAAA;QAAKsE,SAAS,EAAC,YAAY;QAACS,KAAK,EAAE;UAAEC,KAAK,EAAE,GAAGzE,KAAK;QAAI;MAAE;QAAAiE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,eAEN3E,OAAA;MAAKsE,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BvE,OAAA;QAAOiF,OAAO,EAAC,cAAc;QAAAV,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvD3E,OAAA;QACEkF,IAAI,EAAC,OAAO;QACZpB,GAAG,EAAC,GAAG;QACPC,GAAG,EAAC,GAAG;QACPoB,IAAI,EAAC,KAAK;QACVjD,KAAK,EAAE7B,MAAO;QACdiE,SAAS,EAAC,eAAe;QACzBc,EAAE,EAAC,cAAc;QACjBC,QAAQ,EAAGC,CAAC,IAAKhF,SAAS,CAACiF,UAAU,CAACD,CAAC,CAACE,MAAM,CAACtD,KAAK,CAAC;MAAE;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN3E,OAAA;MAAKsE,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BvE,OAAA;QAAAuE,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB3E,OAAA;QAAAuE,QAAA,gBACEvE,OAAA;UAAAuE,QAAA,EAAI;QAAqD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9D3E,OAAA;UAAAuE,QAAA,EAAI;QAAuC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChD3E,OAAA;UAAAuE,QAAA,EAAI;QAAkC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3C3E,OAAA;UAAAuE,QAAA,EAAI;QAA6D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAEN3E,OAAA;MAAAuE,QAAA,EAAQ;IAER;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACzE,EAAA,CAjNQD,GAAG;AAAAwF,EAAA,GAAHxF,GAAG;AAmNZ,eAAeA,GAAG;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}